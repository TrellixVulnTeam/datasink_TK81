#! /usr/bin/env python
"""
  $ ds_client -f <config> -k <queue name,...> -j <job file>

"""
import sys
import json

from datasink.client import JobSource
from g2base import ssdlog


def main(options, args):

    logger = ssdlog.simple_logger(options.name, level=20)

    # create JobSource
    datasrc = JobSource(logger, options.name)

    configfile = options.configfile
    if configfile is None:
        raise ValueError("Please specify a config file with -f")

    # Configure and connect
    datasrc.read_config(configfile)

    datasrc.connect()

    # Read JSON-formatted job file
    if options.jobfile is not None:
        # filename specified on cmd line
        with open(options.jobfile, 'r') as in_f:
            buf = in_f.read()
        job_d = json.loads(buf)

    else:
        # or from stdin if none specified in params
        buf = sys.stdin.read()
        job_d = json.loads(buf)

    # Submit this job to the queues specified
    keys = options.key.split(',')
    for key in keys:
        datasrc.submit_job(key, job_d)

    datasrc.shutdown()


if __name__ == '__main__':

    # Parse command line options with nifty new optparse module
    from argparse import ArgumentParser

    argprs = ArgumentParser("JobSource sender")

    argprs.add_argument("--debug", dest="debug", default=False,
                        action="store_true",
                        help="Enter the pdb debugger on main()")
    argprs.add_argument("-f", "--config", dest="configfile",
                        help="Specify the configuration file for this realm")
    argprs.add_argument("-j", "--job", dest="jobfile", default=None,
                        help="Specify the job file to send")
    argprs.add_argument("-k", "--keys", dest="key", default=None,
                        metavar="KEYS",
                        help="Comma separated set of queue names")
    argprs.add_argument("--host", dest="realm_host", default='localhost',
                        metavar="HOST",
                        help="Use HOST for this realm")
    argprs.add_argument("-n", "--name", dest="name", default=None,
                        metavar="NAME",
                        help="Specify the NAME for this datasource")
    argprs.add_argument("--profile", dest="profile", action="store_true",
                        default=False,
                        help="Run the profiler on main()")

    (options, args) = argprs.parse_known_args(sys.argv[1:])

    if options.key is None:
        argprs.error("You need to specify a key with -k or --key")

    if len(args) > 1:
        argprs.error("Unrecognized arguments: {}".format(str(args)))

    # Are we debugging this?
    if options.debug:
        import pdb

        pdb.run('main(options, args)')

    # Are we profiling this?
    elif options.profile:
        import profile

        print("%s profile:" % sys.argv[0])
        profile.run('main(options, args)')

    else:
        main(options, args)
